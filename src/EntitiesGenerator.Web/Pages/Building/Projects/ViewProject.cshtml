@page "{id}"
@inject MvcHelper MvcHelper
@inject IDisplayNameCollector<ViewEntityByIdPageModel<string, Project, ProjectViewModel, IProjectManager<Project>>> displayNameCollector;
@model ViewEntityByIdPageModel<string, Project, ProjectViewModel, IProjectManager<Project>>
@{
    ViewData["Title"] = Model.Entity.Name;
    MvcHelper.SetActiveSubMenuItem(ViewData, "Projects");

    var emptyModule = new Module();

    displayNameCollector.Collect(x => Model.Entity.Name, Html)
                        .Collect(x => Model.Entity.Modules, Html)
                        .Collect(x => emptyModule.Position, Html);
}

@section Head {
    <environment include="Development">
        <link href="~/assets/building/projects/view/app.css" rel="stylesheet" />
    </environment>
    <environment exclude="Development">
        <link href="~/assets/building/projects/view/app.min.css" rel="stylesheet" asp-append-version="true" />
    </environment>
}

<section id="app" v-cloak>
    <edit-page api-url="@Url.Action("Get", "Projects")"
               id="@Model.Entity.Id"
               :display-names='@displayNameCollector.ToJson()'
               new-module-url="@Url.Page("NewModule", new { id = Model.Entity.Id })"
               view-module-url="@Url.Page("ViewModule", new { id = "_id_" }).Replace("/_id_", string.Empty)"
               return-url="@Url.Page("Index")"></edit-page>
</section>

@section Scripts {
    <environment include="Development">
        <script src="~/assets/building/projects/view/app.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/assets/building/projects/view/app.min.js" asp-append-version="true"></script>
    </environment>
}
