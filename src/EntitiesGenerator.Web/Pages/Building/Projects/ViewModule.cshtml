@page "{id}"
@inject MvcHelper MvcHelper
@inject IDisplayNameCollector<ViewEntityByIdPageModel<string, Module, ModuleViewModel, IModuleManager<Module, Project>>> displayNameCollector;
@model ViewEntityByIdPageModel<string, Module, ModuleViewModel, IModuleManager<Module, Project>>
@{
    ViewData["Title"] = Model.Entity.Name;
    MvcHelper.SetActiveSubMenuItem(ViewData, "Projects");

    var emptyItem = new ItemViewModel();
    var emptyItemsRelationship = new ItemsRelationshipViewModel();
    var emptyOneToManyItemsRelationship = new OneToManyItemsRelationshipViewModel();
    var emptyManyToManyItemsRelationship = new ManyToManyItemsRelationshipViewModel();

    displayNameCollector.Collect(x => Model.Entity.Position, Html)
                        .Collect(x => Model.Entity.Name, Html)
                        .Collect(x => Model.Entity.HasOwnNamespace, Html)
                        .Collect(x => Model.Entity.HasCoreOptions, Html)
                        .Collect(x => Model.Entity.HasEntityFrameworkCoreSealedModelsOptions, Html)
                        .Collect(x => Model.Entity.HasAspNetCoreOptions, Html)
                        .Collect(x => Model.Entity.Project, Html)
                        .Collect(x => Model.Entity.Items, Html)
                        .Collect(x => Model.Entity.ItemsRelationships, Html)
                        .Collect(x => emptyItem.DisplayName, Html)
                        .Collect(x => emptyItem.ModelOnly, Html)
                        .Collect(x => emptyItem.ParameterListLineBreak, Html)
                        .Collect(x => emptyItem.AbstractModel, Html)
                        .Collect(x => emptyItem.ReverseMappingLiteViewModel, Html)
                        .Collect(x => emptyItem.FeatureSettings, Html)
                        .Collect(x => emptyItemsRelationship.Item1, Html)
                        .Collect(x => emptyItemsRelationship.Item2, Html)
                        .Collect(x => emptyItemsRelationship.Item1PropertyName, Html)
                        .Collect(x => emptyItemsRelationship.Item2PropertyName, Html)
                        .Collect(x => emptyItemsRelationship.Type, Html)
                        .Collect(x => emptyOneToManyItemsRelationship.ParentNullable, Html)
                        .Collect(x => emptyOneToManyItemsRelationship.DeleteRestrict, Html)
                        .Collect(x => emptyOneToManyItemsRelationship.HasSortedChildrenInParent, Html)
                        .Collect(x => emptyOneToManyItemsRelationship.SortedChildrenInParentCriteriaPropertyName, Html)
                        .Collect(x => emptyOneToManyItemsRelationship.HasFullParentInChildrenViewModel, Html)
                        .Collect(x => emptyOneToManyItemsRelationship.HasFullChildrenInParentViewModel, Html)
                        .Collect(x => emptyManyToManyItemsRelationship.HasSortedItem2sInItem1, Html)
                        .Collect(x => emptyManyToManyItemsRelationship.SortedItem2sInItem1CriteriaPropertyName, Html)
                        .Collect(x => emptyManyToManyItemsRelationship.HasSortedItem1sInItem2, Html)
                        .Collect(x => emptyManyToManyItemsRelationship.SortedItem1sInItem2CriteriaPropertyName, Html)
                        .Collect(x => emptyManyToManyItemsRelationship.HasFullItem1sInItem2ViewModel, Html)
                        .Collect(x => emptyManyToManyItemsRelationship.HasFullItem2sInItem1ViewModel, Html);
}

@section Head {
    <environment include="Development">
        <link href="~/assets/building/modules/view/app.css" rel="stylesheet" />
    </environment>
    <environment exclude="Development">
        <link href="~/assets/building/modules/view/app.min.css" rel="stylesheet" asp-append-version="true" />
    </environment>
}

<section id="app" v-cloak>
    <edit-page api-url="@Url.Action("Get", "Modules")"
               id="@Model.Entity.Id"
               :display-names='@displayNameCollector.ToJson()'
               new-item-url="@Url.Page("NewItem", new { id = Model.Entity.Id })"
               view-item-url="@Url.Page("ViewItem", new { id = "_id_" }).Replace("/_id_", string.Empty)"
               add-items-relationship-url="@Url.Action("AddItemsRelationship", "Modules", new { id = Model.Entity.Id })"
               remove-items-relationship-url="@Url.Action("RemoveItemsRelationship", "Modules", new { id = "_id_" }).Replace("/_id_", string.Empty)"
               update-one-to-many-items-relationship-url="@Url.Action("UpdateOneToManyItemsRelationship", "Modules")"
               update-many-to-many-items-relationship-url="@Url.Action("UpdateManyToManyItemsRelationship", "Modules")"
               return-url="@Url.Page("ViewProject", new { id = Model.Entity.ProjectId })"></edit-page>
</section>

@section Scripts {
    <environment include="Development">
        <script src="~/assets/building/modules/view/app.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/assets/building/modules/view/app.min.js" asp-append-version="true"></script>
    </environment>
}
